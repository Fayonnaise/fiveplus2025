# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1
commands:
  get-job-status-message:
    parameters:
      exit_code:
        type: string
      job_name:
        type: string
    steps:
      - run: |
          echo "REPOSITORY: << pipeline.event.github.repository >>"
          echo "EXIT CODE:<< parameters.exit_code >>\nJOB NAME:<< parameters.job_name >>"
          if [ "<< parameters.exit_code >>" = "0" ]; then
            MESSAGE="<< parameters.job_name >> passed!"
          else
            MESSAGE="<< parameters.job_name >> failed."
          fi
          echo "export JOB_MESSAGE=\"$MESSAGE\"" >> $BASH_ENV
          
          echo "\nMESSAGE: $MESSAGE"
          echo "\nBASH ENV: $BASH_ENV"
  post-gh-pr-comment:
    parameters:
      message:
        type: string
        default: "someone forgot to leave a message"
    steps:
      - run: |
          PR_NUMBER="<< pipeline.event.github.pull_request.number >>"
          echo "PR NUMBER: $PR_NUMBER"
          echo "URL: https://api.github.com/repos/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/issues/$PR_NUMBER/comments"
          
          echo "BODY: '{"body": "<< parameters.message >>"}'"
          
          curl -H "Authorization: token $GITHUB_TOKEN" \
          -X POST \
          -d '{"body": "<< parameters.message >>"}' \
          "https://api.github.com/repos/Fayonnaise/fiveplus2025/issues/$PR_NUMBER/comments"
        
# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/jobs-steps/#jobs-overview & https://circleci.com/docs/configuration-reference/#jobs
jobs:
  say-hello:
    # Specify the execution environment. You can specify an image from Docker Hub or use one of our convenience images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/executor-intro/ & https://circleci.com/docs/configuration-reference/#executor-job
    docker:
      # Specify the version you desire here
      # See: https://circleci.com/developer/images/image/cimg/base
      - image: cimg/base:current
    steps:
      - run:
          name: "Say hello"
          command: "echo Hello, World!"
  build:
    macos:
      xcode: "16.4.0"
    # Add steps to the job
    # See: https://circleci.com/docs/jobs-steps/#steps-overview & https://circleci.com/docs/configuration-reference/#steps
    steps:
      # Checkout the code as the first step.
      - checkout
      - run:
          name: "build iOS app"
          command: |
            xcodebuild -scheme fiveplus2025 -destination 'platform=iOS Simulator,name=iPhone 16'
            BUILD_STATUS=$?
            echo "export BUILD_STATUS=$BUILD_STATUS" >> $BASH_ENV
      - get-job-status-message:
          exit_code: $BUILD_STATUS
          job_name: "Build"
      - post-gh-pr-comment:
          message: $JOB_MESSAGE
      - run:
          name: "test iOS app"
          command: |
            xcodebuild test -scheme fiveplus2025 -destination 'platform=iOS Simulator,name=iPhone 16'
            TEST_STATUS=$?
            echo "export TEST_STATUS=$TEST_STATUS" >> $BASH_ENV
          

# Orchestrate jobs using workflows
# See: https://circleci.com/docs/workflows/ & https://circleci.com/docs/configuration-reference/#workflows
workflows:
  say-hello-workflow: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - say-hello
      - build
