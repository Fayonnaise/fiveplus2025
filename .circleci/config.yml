# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1
commands:
  set-up:
    description: Sets up any environment variables that we need
    steps:
      - run:
          name: Set Up Environment Variables
          command: |
            REPO_NAME=$(basename -s .git `git config --get remote.origin.url`)
            echo "export REPO_NAME=$REPO_NAME" >> $BASH_ENV

            REPO_OWNER=$(basename $(dirname $(git config --get remote.origin.url)))
            echo "export REPO_OWNER=$REPO_OWNER" >> $BASH_ENV
  get-job-status-message:
    description: Get's the status message of a job
    parameters:
      exit_code:
        type: string
      job_name:
        type: string
    steps:
      - run: 
          name: Get Job's Status Message
          command: |
            echo "EXIT CODE:<< parameters.exit_code >>\nJOB NAME:<< parameters.job_name >>"
            if [ "<< parameters.exit_code >>" = "0" ]; then
              MESSAGE="<< parameters.job_name >> passed!"
            else
              MESSAGE="<< parameters.job_name >> failed."
            fi
            echo "export JOB_MESSAGE=\"$MESSAGE\"" >> $BASH_ENV
            
            echo "\nMESSAGE: $MESSAGE"
            echo "\nBASH ENV: $BASH_ENV"
  post-gh-pr-comment:
    description: Posts the given message as a comment to the upstream GH PR
    steps:
      - run: 
          name: Post Comment to Github PR
          command: |
            PR_NUMBER="<< pipeline.event.github.pull_request.number >>"
            echo "PR NUMBER: $PR_NUMBER"
            echo "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/issues/$PR_NUMBER/comments"
            
            echo "BODY: '{"body": "$JOB_MESSAGE"}'"
            
            curl -H "Authorization: token $GITHUB_TOKEN" \
            -X POST \
            -d "{\"body\": \"$JOB_MESSAGE\"}" \
            "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/issues/$PR_NUMBER/comments"
  post-job-status-comment:
    description: "Posts the status of the job as a comment to the upstream GH PR"
    parameters:
      exit_code:
        type: string
      job_name:
        type: string
    steps:
      - get-job-status-message:
          exit_code: << parameters.exit_code >>
          job_name: << parameters.job_name >>
      - post-gh-pr-comment
# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/jobs-steps/#jobs-overview & https://circleci.com/docs/configuration-reference/#jobs
jobs:
  say-hello:
    # Specify the execution environment. You can specify an image from Docker Hub or use one of our convenience images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/executor-intro/ & https://circleci.com/docs/configuration-reference/#executor-job
    docker:
      # Specify the version you desire here
      # See: https://circleci.com/developer/images/image/cimg/base
      - image: cimg/base:current
    steps:
      - run: |
          echo "Hello World!"
  build:
    macos:
      xcode: "16.4.0"
    # Add steps to the job
    # See: https://circleci.com/docs/jobs-steps/#steps-overview & https://circleci.com/docs/configuration-reference/#steps
    steps:
      - checkout
      - set-up
      - run:
          name: "build iOS app"
          command: |
            xcodebuild -scheme fiveplus2025 -destination 'platform=iOS Simulator,name=iPhone 16'
            BUILD_STATUS=$?
            echo "export BUILD_STATUS=$BUILD_STATUS" >> $BASH_ENV
      - post-job-status-comment:
          exit_code: $BUILD_STATUS
          job_name: "Build"
      - run:
          name: "test iOS app"
          command: |
            set +e
            xcodebuild test -scheme fiveplus2025 -destination 'platform=iOS Simulator,name=iPhone 16'
            TEST_STATUS=$?
            echo "export TEST_STATUS=$TEST_STATUS" >> $BASH_ENV
            set -e
      - post-job-status-comment:
          exit_code: $TEST_STATUS
          job_name: "Test"
      - run:
          name: Fail Job if Test Failed
          command: |
            if [ "$TEST_STATUS" -ne 0 ]; then
              echo "Tests failed, failing the job as expected."
              exit 1
            fi
          

# Orchestrate jobs using workflows
# See: https://circleci.com/docs/workflows/ & https://circleci.com/docs/configuration-reference/#workflows
workflows:
  say-hello-workflow: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build
